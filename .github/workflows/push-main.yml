name: Push in main branch

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  run_tests_build_app:
    name: Run tests and build app
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Run Unitary tests
        run: mvn test
      - name: Build native with Maven
        run: mvn -B package
      - name: Upload jar for next job
        uses: actions/upload-artifact@v2
        with:
          name: target
          path: target
          retention-days: 1
  
  build_docker_image:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs: [run_tests_build_app]
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download jar from previous job
        uses: actions/download-artifact@v2
        with:
          name: target
          path: target
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: docker-image:latest
          outputs: type=docker,dest=/tmp/docker-image.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  publish_in_dockerhub:
    name: Publish in DockerHub
    runs-on: ubuntu-20.04
    needs: [build_docker_image]
    env:
      IMAGE_NAME: twitter-scheduler
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/docker-image.tar
      - name: Login to DockerHub
        run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" 
      - name: Push image to DockerHub
        run: |
          IMAGE_VERSION=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          docker tag docker-image ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_VERSION